1. Предварительная настройка сервера:

Добавляем на сервер русскую локаль, для начала проверяем её отсутствие/присутствие командой

locale -a | grep ru
если в ответ ничего нет, то запускаем

dpkg-reconfigure locales
выбираем в списке локаль ru_RU.UTF-8
и жмем Yes
выбираем локаль по умолчанию en_US.UTF-8

2. Начинаем установку PostgreSQL 10:
apt-get install lsb-release
echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main" > /etc/apt/sources.list.d/pgdg.list
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
apt-get update
apt-get install postgresql-10 -y
Краткая справка по местоположению основных файлов PostgreSQL 10:
Местоположение баз данных:
/var/lib/postgresql/10
Местоположение логов:
/var/log/postgresql/postgresql-10-main.log
Настройка ротации логов:
/etc/logrotate.d/postgresql-common
Основные файлы конфигурации:
/etc/postgresql/10/main/postgresql.conf
/etc/postgresql/10/main/pg_hba.conf

Первым делом меняем пароль пользователя postgres:

su - postgres
psql
postgres=# \password postgres
postgres=# \q
3. Тюнинг настроек PostgreSQL:

По умолчанию PostgreSQL принимает соединения только с локальных служб, т.к. слушает интерфейс localhost и это абсолютно правильно с точки зрения безопасности, но если Вы планируете подключения к серверу извне или из локальной сети, то Вам потребуется поменять параметр listen_addresses

Для PostgreSQL 10 открываем основной файл настроек

vi /etc/postgresql/10/main/postgresql.conf
и раскомментируем строку

listen_addresses = 'localhost'
listen_addresses = '*'

Комментируем строку 
ssl on


# DB Version: 10
# OS Type: linux
# DB Type: web
# Total Memory (RAM): 2 GB
# CPUs num: 1
# Connections num: 50
# Data Storage: ssd

max_connections = 50
shared_buffers = 512MB
effective_cache_size = 1536MB
maintenance_work_mem = 128MB
checkpoint_completion_target = 0.7
wal_buffers = 16MB
default_statistics_target = 100
random_page_cost = 1.1
effective_io_concurrency = 200
work_mem = 10485kB
min_wal_size = 1GB
max_wal_size = 2GB
idle_in_transaction_session_timeout = 30000 (msec)

https://pgtune.leopard.in.ua/#/

Теперь разрешим подключение из локальной сети с любых хостов и к любым БД, для этого в конец файла /etc/postgresql/10/main/pg_hba.conf добавим:

# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
host	all		all		94.125.120.28/32	md5
host	all		all		13.68.143.152/32	md5
host	all		all		40.76.65.192/32		md5

Далее выходим из под пользователя postgres и рестартуем PostgreSQL:

service postgresql restart
Проверяем открытые порты

netstat -ltupn |grep postgre
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      563/sshd
tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      9484/postgres
tcp6       0      0 :::22                   :::*                    LISTEN      563/sshd
tcp6       0      0 :::5432                 :::*                    LISTEN      9484/postgres


DataGrib:

CREATE DATABASE rp_server;
 CREATE USER kimlic WITH password 'LU6dME4NzQ';
ALTER USER kimlic WITH SUPERUSER;
GRANT ALL ON DATABASE rp_server TO kimlic;


----------------
## 1. Configure SO locale

```
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
locale-gen en_US.UTF-8
dpkg-reconfigure locales
```

## 2. Install BDR via apt

(Do not install postgresql-9.5! Use postgresql-bdr-9.4 modified version)

```
sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
sudo sh -c 'echo "deb [arch=amd64] http://packages.2ndquadrant.com/bdr/apt/ $(lsb_release -cs)-2ndquadrant main" > /etc/apt/sources.list.d/2ndquadrant.list'
sudo apt-get install wget ca-certificates
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
wget --quiet -O - http://packages.2ndquadrant.com/bdr/apt/AA7A6805.asc | sudo apt-key add -
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install postgresql-bdr-9.4 postgresql-bdr-9.4-bdr-plugin
```

## 3. Create db directory, set PATH and initdb

```
su -l postgres
export PATH=/usr/lib/postgresql/9.4/bin:$PATH
mkdir $HOME/9.4-bdr
initdb -D $HOME/9.4-bdr -A trust
```

## 4. Edit `$HOME/9.4-bdr/postgresql.conf`

```
listen_addresses = '*'

shared_preload_libraries = 'bdr'
wal_level = 'logical'
track_commit_timestamp = on
max_connections = 100
max_wal_senders = 10
max_replication_slots = 10
max_worker_processes = 10
```

## 5. Edit `$HOME/9.4-bdr/pg_hba.conf`

Master1: 104.236.39.43
Master2: 45.55.182.128

```
local   replication     postgres                                trust
host    replication     postgres        127.0.0.1/32            trust
host    replication     postgres        ::1/128                 trust

host all all 0.0.0.0/0  password

host replication postgres 104.236.39.43/32 trust
host replication postgres 45.55.182.128/32 trust

host replication bdrsync 104.236.39.43/32 password
host replication bdrsync 45.55.182.128/32 password
```

## 6. Stop old config server, start server and create bdr user

```
pg_ctl -D $HOME/9.4/main stop
pg_ctl -D $HOME/9.4-bdr start
psql -c "CREATE USER bdrsync superuser;"
psql -c "ALTER USER bdrsync WITH PASSWORD '12345#';"
```

## 7. Create an unprivileged user and a blank database

```
createuser amsv2
createdb -O amsv2 amstest
psql amstest -c 'CREATE EXTENSION btree_gist;'
psql amstest -c 'CREATE EXTENSION bdr;'
```

## 8. Create group on Master1

```
psql
\c amstest
SELECT bdr.bdr_group_create(
    local_node_name := 'node1',
    node_external_dsn := 'host=104.236.39.43 user=bdrsync dbname=amstest password=12345#'
);
```

## 9. Join group from Master2

```
psql
\c amstest
SELECT bdr.bdr_group_join(
    local_node_name := 'node2',
    node_external_dsn := 'host=45.55.182.128 user=bdrsync dbname=amstest password=12345#',
    join_using_dsn := 'host=104.236.39.43 user=bdrsync dbname=amstest password=12345#'
);
```